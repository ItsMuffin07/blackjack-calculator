from functools import lru_cache
from time import time

EMPTY_DECK = [2, 2, 2, 2,
              3, 3, 3, 3,
              4, 4, 4, 4,
              5, 5, 5, 5,
              6, 6, 6, 6,
              7, 7, 7, 7,
              8, 8, 8, 8,
              9, 9, 9, 9,
              10, 10, 10, 10,
              10, 10, 10, 10,  # Jacks
              10, 10, 10, 10,  # Queens
              10, 10, 10, 10,  # Kings
              11, 11, 11, 11]  # Aces


def blackjack(cards: list) -> list:
    '''
    :param cards: list of cards in deck
    :return: list containing total value, index 0 is the higher value if there is an ace
             returns [1,1] if game is over
             returns [value] when at 11, game is busted
             returns [higher value, lower value] for both combinations of ace
    '''
    total = [0, 0]
    for card in cards:
        if card != 11:
            total[0] += card
            total[1] += card
        elif total[0] == total[1]:  # First ace
            total[0] += 11  # index 0 is the higher one
            total[1] += 1  # index 1 is the lower one
        else:  # When more than one ace
            total[0] += card
            total[1] += card
    if total[0] > 21 and total[1] > 21:  # Both busted
        return [1, 1]
    elif total[0] > 21 and total[1] <= 21:  # Busted only when Ace is at 11
        return [total[1]]
    else:
        return total

@lru_cache(maxsize=1000)
def dealer_probability_busted(deck: tuple, dealer_hand: tuple) -> float: # Generated by AI by modifying my code
    '''
    :param deck: current branch deck
    :param dealer_hand: current branch hand
    :return: probability of current branch busting
    '''
    deck = list(deck)
    dealer_hand = list(dealer_hand)

    hand = blackjack(dealer_hand)

    # Check if the dealer has already busted
    if hand == [1, 1]:
        return 1.0

    # Determine the dealer's best hand value
    max_value = hand[0]
    if len(hand) > 1:
        min_value = hand[1]
    else:
        min_value = max_value

    # If the dealer should stand based on the higher value
    if max_value >= 17:
        return 0.0

    busted_probability = 0.0

    for card in deck:
        curr_probability = 1 / len(deck)  # Current branch probability

        temp_deck = deck.copy()
        temp_deck.remove(card)  # Remove card from the deck

        new_hand = dealer_hand.copy()
        new_hand.append(card)  # Add new card to hand

        branch_probability = dealer_probability_busted(tuple(temp_deck), tuple(new_hand))
        busted_probability += branch_probability * curr_probability

    return busted_probability

def calculate_probability(deck: list, hand: list, dealer_card: int):
    '''
    :param deck: the deck before drawing
    :param hand: Player's cards
    :param dealer_card: Dealer open card
    :return:

    first remove our cards from deck and calculate probability of getting card that will not make us bust

    '''
    total: list = blackjack(hand)
    maximum_pull: int = 21 - total[-1]
    if total[0] == 1: # Busted already
        return 0

    for card in hand: # clear deck of our drawn cards
        deck.remove(card)

    deck.remove(dealer_card) # clear deck of dealer known card

    probability_dealer_busting = dealer_probability_busted(tuple(deck), tuple([dealer_card]))


    can_pull: int = 0 # Counter for how many player can pull to not bust
    for card in deck:
        temp = hand.copy()
        temp.append(card)
        new_hand = blackjack(temp)[-1]
        added_value = new_hand - sum(hand)
        if added_value <= maximum_pull and new_hand != 1:
            can_pull += 1

    success_probability: float = can_pull / len(deck) # probability that the next card pulled will not bust

    print("Maximum pull:"+str(maximum_pull))
    print("Probability of dealer busting:"+str(probability_dealer_busting))

    return success_probability, probability_dealer_busting


deck = EMPTY_DECK.copy()
for i in range(7):
    temp = EMPTY_DECK.copy()
    for card in temp:
        deck.append(card)
print(len(deck))
# print(probability_busted(deck,[10, 3]))
# # print(blackjack([11, 8]))
# print(calculate_probability(deck, [9, 2], 11))
start_time = time()
print(dealer_probability_busted(tuple(deck), dealer_hand=tuple([10,5])))
print(dealer_probability_busted.cache_info())
end_time = time()
print(f"Run time: {(end_time - start_time)*1000}ms")
